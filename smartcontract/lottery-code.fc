_ pack_state(int seqno, int pubkey, int order_seqno, int number_of_wins, int incoming_amount, int outgoing_amount, int owner_wc, int owner_account_id, cell orders) inline_ref {
    return begin_cell()
            .store_uint(seqno, 32)
            .store_uint(pubkey, 256)
            .store_uint(order_seqno, 32)
            .store_uint(number_of_wins, 32)
            .store_grams(incoming_amount)
            .store_grams(outgoing_amount)
            .store_int(owner_wc, 32)
            .store_uint(owner_account_id, 256)
            .store_dict(orders)
            .end_cell();
}


_ unpack_state() inline_ref {
    var ds = begin_parse(get_data());
    var unpacked = (ds~load_uint(32), ds~load_uint(256), ds~load_uint(32), ds~load_uint(32), ds~load_grams(), ds~load_grams(), ds~load_int(32), ds~load_uint(256), ds~load_dict());
    ds.end_parse();
    return unpacked;
}

int balance() inline_ref method_id {
    return get_balance().pair_first();
}

() send_grams(int wc, int addr, int grams) impure {
	;; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
    cell msg = begin_cell()
    ;;	.store_uint(0, 1) ;; 0 <= format indicator int_msg_info$0 
    ;;	.store_uint(1, 1) ;; 1 <= ihr disabled
    ;;	.store_uint(1, 1) ;; 1 <= bounce = true
    ;;	.store_uint(0, 1) ;; 0 <= bounced = false
    ;;	.store_uint(4, 5)  ;; 00100 <= address flags, anycast = false, 8-bit workchain
        .store_uint (196, 9)
        .store_int(wc, 8)
        .store_uint(addr, 256)
        .store_grams(grams)
        .store_uint(0, 107) ;; 106 zeroes +  0 as an indicator that there is no cell with the data.
        .end_cell(); 
    send_raw_message(msg, 3); ;; mode, 2 for ignoring errors, 1 for sender pays fees, 64 for returning inbound message value
}

() recv_internal(slice in_msg) impure {
    ;; TODO: implementation 
}

() recv_external(slice in_msg) impure {
    if (slice_empty?(in_msg)) {
        return (); 
    }
    var signature = in_msg~load_bits(512);
    var message = in_msg;
    int msg_seqno = message~load_uint(32);
    (int stored_seqno, int pubkey, int order_seqno, int number_of_wins, int incoming_amount, int outgoing_amount, int owner_wc, int owner_account_id, cell orders) = unpack_state();
    throw_unless(33, msg_seqno == stored_seqno);
    throw_unless(34, check_signature(slice_hash(in_msg), signature, pubkey));
    int action = message~load_uint(7);
    if (action == 1) { ;; change wallet owner address 
        throw_unless(35, 288 == slice_bits(message));
        accept_message();
        int new_wc = message~load_int(32);
        int new_account_id = message~load_uint(256);
        set_data(pack_state(stored_seqno + 1, pubkey, order_seqno, number_of_wins, incoming_amount, outgoing_amount, new_wc, new_account_id, orders));
    } elseif (action == 2) { ;; send given amount of grams to owner wallet address  
        int amount_to_send = message~load_grams();
        throw_if(36, amount_to_send + 500000000 > balance());
        accept_message();
        send_grams(owner_wc, owner_account_id, amount_to_send);
        set_data(pack_state(stored_seqno + 1, pubkey, order_seqno, number_of_wins, incoming_amount, outgoing_amount, owner_wc, owner_account_id, orders));
    }
}

